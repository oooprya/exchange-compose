from aiogram import types, F, Router
from aiogram.types import Message
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardRemove
from aiogram.filters import Command
from functions.orders import order_send_message
from functions.post_db import post_to_db
from db_main import Database
import requests
from os import getenv
from loguru import logger

orders_url = f'{getenv("API")}/api/v1/orders/?status=new'
get_status = f'{getenv("API")}/api/v1/orders/?status=accepted'

headers = {"Authorization": f"ApiKey {getenv('API_KEY')}"}

router = Router()



# getenv("ULIA") Head Admin PrivatObmenOd
chat_id_name = getenv("Admin")


db = Database()

@router.message(Command("start"))
async def start_handler(msg: Message):

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        chat_id = msg.from_user.id
        username = msg.from_user.username or "–ë–µ–∑ username"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        exists, user_data = db.user_exists(chat_id)

        if exists:
            if user_data[3] == "client":
                await msg.answer(text=f"‚ú® –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n {msg.from_user.first_name} –í–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤. \n\n",
                                 reply_markup=get_armor(chat_id))
                return
            if user_data[3] == "moderator":
                await msg.answer(text=f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å {msg.from_user.first_name}!\n\n",
                                 reply_markup=api_res())
                return
            logger.debug("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.")
            return

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ä–æ–ª—å—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        result = db.add_user(
            chat_id=chat_id,
            chat_id_name=username,
            role="client",  # –†–æ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            clients_telephone=""
        )

        if result:
            logger.debug("–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
            await msg.answer(text='–©–æ–± –ø–æ–±–∞—á–∏—Ç–∏ —Å–≤–æ—é –±—Ä–æ–Ω—å –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É üì≤ –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ —Å–≤—ñ–π –∫–æ–Ω—Ç–∞–∫—Ç –∫–Ω–æ–ø–∫–∞ –≤ –º–µ–Ω—é üëá üëá üëá', 
                             reply_markup=get_contact())
        else:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ /start: {e}")
        await msg.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")


@logger.catch
def get_contact():
    kb = [
        [
            KeyboardButton(text='üì≤ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç', request_contact=True)
        ],
    ]
    keyboard = ReplyKeyboardMarkup(
        keyboard=kb,
        resize_keyboard=True, one_time_keyboard=True,
        input_field_placeholder="–Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É üì≤ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç"
    )
    return keyboard

def get_armor(tel: str):
    buttons = [
        [
            InlineKeyboardButton(text="üí≤ –ú–æ—ó –±—Ä–æ–Ω—ñ",
                                 callback_data=f"getarmor_{tel}"),
        ],

    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard


@logger.catch
async def status_orders(data_id, data_status):
    order_patch = {"status": f"{data_status}"}
    x = requests.patch(f'{getenv("API")}/api/v1/orders/{data_id}/',
                       json=order_patch, headers=headers)
    logger.debug(x.status_code)
    return order_patch


@logger.catch
@router.callback_query()
async def callbacks_all_trip(callback: types.CallbackQuery):
    """ –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –î–∞–Ω–Ω—ã—Ö """
    logger.debug(callback.data)
    order_id = callback.data.split("_")[1]
    status = callback.data.split("_")[0]
    order_id.zfill(4)
    if callback.data == f"accepted_{order_id}":

        await status_orders(order_id, status)
        await callback.bot.edit_message_text(
            chat_id=callback.from_user.id, text=f"–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è {order_id.zfill(4)} ‚úÖ –ü—Ä–∏–π–Ω—è—Ç–µ\n\n‚ûï –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ ‚ÑπÔ∏è –ü—Ä–∏–π–Ω—è—Ç–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ", message_id=callback.message.message_id)
        # await callback.bot.send_message(chat_id=chat_id_name, text=f"–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è {order_id} ‚ûï –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ ‚ÑπÔ∏è –ü—Ä–∏–π–Ω—è—Ç–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ")

        logger.debug(order_id)

    logger.info(callback.from_user)
    if callback.data == f'getarmor_{callback.data.split("_")[1]}':

        exists, user_data = db.user_exists(callback.data.split("_")[1])
        if exists:
            if user_data[3] == "client":
                logger.debug(user_data)
                order, order_data = db.get_orders(clients_telephone=user_data[4])
                logger.debug(user_data[4])
                logger.debug(order)
                id = f"{order_data[0]}".zfill(4)
                send_order = f"üõé <b>–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è</b> {id}\n\nüè¶{user_data[4]}\n{user_data[4]} \nü´≥{user_data[4]} –ø–æ {user_data[4]} \nC—É–º–∞ <b>{user_data[4]}</b>\n\n"
                await callback.bot.send_message(chat_id=callback.from_user.id, text=send_order)


    if callback.data == f"cancel_{order_id}":
        await status_orders(order_id, status)
        await callback.bot.edit_message_text(chat_id=callback.from_user.id, text=f"–í—ñ–¥–º—ñ–Ω–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Ññ{order_id.zfill(4)}", message_id=callback.message.message_id)

        logger.debug(order_id)

    if callback.data == f"completed_{order_id}":
        await status_orders(order_id, status)
        await callback.bot.edit_message_text(chat_id=callback.from_user.id, text=f"‚úÖ –í–∏–∫–æ–Ω–∞–Ω–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Ññ{order_id.zfill(4)}", message_id=callback.message.message_id)
        logger.debug(f'{order_id} {callback.from_user}')

all_orders =f"<a href='{getenv('API')}/admin/currency/orders/'>–í—Å–µ –∑–∞–∫–∞–∑—ã</a>"

@logger.catch
def accept_order(order_id):
    buttons = [
        [
            InlineKeyboardButton(text="‚úîÔ∏è –ü—Ä–∏–π–Ω—è—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è",
                                 callback_data=f"accepted_{order_id}"),
        ],
        [
            InlineKeyboardButton(text="‚ùå –í—ñ–¥–º—ñ–Ω–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è",
                                 callback_data=f"cancel_{order_id}"),
        ],
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard


@router.message(F.text == "‚ÑπÔ∏è –ü—Ä–∏–π–Ω—è—Ç–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è")
async def ger_accepted_(message: types.Message):
    help_text = f"üí¨ <b>–í –¥–∞–Ω–æ–º —Ä–∞–∑–¥–µ–ª–µ –í—ã —É–≤–∏—Ç–∏—Ç–µ –ø—Ä–∏–Ω—è—Ç—ã–µ –∑–∞–∫–∞–∑—ã:</b>\n\n1 –í —Å–ª—É—á–∏–∏ –µ—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –Ω–µ –ø—Ä–∏—à–æ–ª –∑–∞ –±—Ä–æ–Ω—å—é - –ú–µ–Ω–∞–¥–∂–µ—Ä –Ω–∞–∂–∏–º–∞–µ—Ç –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–¥ –∑–∞–∫–∞–∑–æ–º –û—Ç–º–µ–Ω–∏—Ç—å.\n2 –í —Å–ª—É—á–∏–∏ –µ—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –ø—Ä–∏—à–æ–ª –∑–∞ –±—Ä–æ–Ω—å—é - –ú–µ–Ω–∞–¥–∂–µ—Ä –≤–∏–±–∏—Ä–∞–µ—Ç –∫–Ω–æ–ø–∫—É –ó–∞–∫–∞–∑ –≤–∏–ø–æ–ª–Ω–µ–Ω\n {all_orders}"

    await message.answer(text=help_text)
    res = requests.get(get_status)
    data = res.json()
    orders = data.get('objects')
    count = 1
    logger.debug(orders)
    if orders:
        for order in orders:
            id = f"{order.get('id')}".zfill(4)
            send_order = f"üè∑ {count} <b>–ü—Ä–∏–π–Ω—è—Ç–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è</b> {id}\n\nüè¶{order.get('address_exchanger')}\n{order.get('currency_name')} \nü´≥{order.get('buy_or_sell')} –ø–æ {order.get('exchange_rate')} \nC—É–º–º–∞ <b>{order.get('order_sum')}</b>\n\nüì≤{order.get('—Ålients_telephone')}"
            get_id = order.get('id')
            await message.answer(text=send_order,  reply_markup=kb_status_order(get_id))
            count += 1
    if orders == []:
        await message.answer(text='–ù–µ–º–∞—î –ü—Ä–∏–π–Ω—è—Ç–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å')


@router.message(F.text == "on_order_send_message")
async def echo_handler(message: types.Message):
    logger.info(message.text)
    # await message.bot.send_message(chat_id=chat_id_name, text=f"{message.text}")
    await order_send_message()


@router.message(F.text == "on_post_db")
async def echo_handler(message: types.Message):
    logger.info(message.text)
    await post_to_db()


@router.message()
async def echo_handler(msg: types.Message):

    if msg.contact:
            db.update_phone_user(chat_id=msg.from_user.id, clients_telephone=msg.contact.phone_number)
            await msg.answer(f"–î—è–∫—É—î–º–æ –∑–∞ –≤–∞—à –Ω–æ–º–µ—Ä \nüì≤{msg.contact.phone_number}",
                                 reply_markup=ReplyKeyboardRemove())
            await msg.answer(text=f"‚ú® –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ!\n\n {msg.from_user.first_name} –î–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –±—Ä–æ–Ω—ñ\n–Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É üëáüèªüëáüèªüëáüèª",
                                 reply_markup=get_armor(msg.contact.phone_number))



@logger.catch
def kb_status_order(order_id):
    buttons = [
        [
            InlineKeyboardButton(text="‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω–æ",
                                 callback_data=f"completed_{order_id}"),
        ],
        [
            InlineKeyboardButton(text="‚ùå –í—ñ–¥–º—ñ–Ω–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è",
                                 callback_data=f"cancel_{order_id}"),
        ],
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard


@logger.catch
def api_res():
    kb = [[KeyboardButton(text='‚ÑπÔ∏è –ü—Ä–∏–π–Ω—è—Ç–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è',
                          callback_data=f"apiaccepted")],]
    keyboard = ReplyKeyboardMarkup(
        keyboard=kb,
        resize_keyboard=True, one_time_keyboard=True
    )
    return keyboard


logger.add("../log/DEBUG.log", colorize=True,
           format="{time:YYYY-MM-DD HH:mm:ss} {name} {line} {level} {message} ", level="DEBUG", rotation="500 KB", compression="zip")
